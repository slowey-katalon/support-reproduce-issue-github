trigger:
  branches:
    include:
    - main
stages:
- stage: __default
  jobs:
  - job: Job
    pool:
      vmImage: macos-latest
    steps:
    - task: CmdLine@2
      displayName: "Install iOS dependencies and Appium"
      inputs:
        script: |
          brew update
          brew install carthage ios-deploy libimobiledevice ideviceinstaller
          brew install ios-webkit-debug-proxy
          npm i --location=global appium
          npm install -g appium-doctor
          appium driver install xcuitest@7.35.0
    - task: CmdLine@2
      displayName: "Set up Xcode"
      inputs:
        script: |
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -license accept
    - task: CmdLine@2
      displayName: "List available iOS simulators"
      inputs:
        script: |
          xcrun simctl list devices
    - task: CmdLine@2
      displayName: "Select and Ensure an iOS Simulator is Running"
      inputs:
        script: |
          # Specify exact iOS version (use an available version on your macos-latest image)
          IOS_VERSION="16.4"
          DEVICE_NAME="iPhone 14"
          DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-14"
          
          # Kill any existing simulator processes
          killall "Simulator" 2>/dev/null || true
          xcrun simctl shutdown all 2>/dev/null || true
          
          # Create a new simulator with specific iOS version
          echo "Creating simulator with iOS $IOS_VERSION"
          DEVICE_UDID=$(xcrun simctl create "CI-$DEVICE_NAME" "$DEVICE_TYPE" "com.apple.CoreSimulator.SimRuntime.iOS-${IOS_VERSION//./-}")
          
          echo "Created simulator with UDID: $DEVICE_UDID"
          
          # Boot the simulator with increased timeout
          echo "Booting simulator..."
          xcrun simctl boot "$DEVICE_UDID"
          
          # Wait for simulator to be fully booted
          echo "Waiting for simulator to be ready..."
          RETRY=0
          MAX_RETRY=30
          while [ $RETRY -lt $MAX_RETRY ]; do
            STATUS=$(xcrun simctl list | grep "$DEVICE_UDID" | grep "Booted")
            if [ ! -z "$STATUS" ]; then
              echo "Simulator is booted"
              # Additional wait to ensure services are started
              sleep 15
              break
            fi
            echo "Waiting for simulator to boot... ($RETRY/$MAX_RETRY)"
            sleep 10
            RETRY=$((RETRY+1))
          done
          
          # Print status and diagnostics
          xcrun simctl list devices
          
          # Set the variable for later steps
          echo "##vso[task.setvariable variable=DEVICE_UDID]$DEVICE_UDID"
          echo "##vso[task.setvariable variable=IOS_VERSION]$IOS_VERSION"
    - task: CmdLine@2
      displayName: "Pre-warm simulator"
      inputs:
        script: |
          # Install the WDA to pre-warm the simulator
          appium driver run xcuitest preboot --deviceName "CI-iPhone 14" --platformVersion $(IOS_VERSION) --udid $(DEVICE_UDID)
          sleep 10
    - task: katalonTask@1
      inputs:
        version: '10.1.0'
        executeArgs: '-retry=0 -statusDelay=15 -testSuitePath="Test Suites/mobileTS" -browserType="iOS" -deviceId=$(DEVICE_UDID) -platformVersion=$(IOS_VERSION) -apiKey="d1e929ac-be0f-4cec-a5fc-f9fd6d7c8485"'
