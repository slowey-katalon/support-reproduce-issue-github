name: iOS Test Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  ios-test:
    runs-on: macos-14

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect CPU Architecture
        run: |
          # Detect CPU architecture
          ARCH=$(uname -m)
          echo "Detected CPU architecture: $ARCH"

          if [ "$ARCH" = "arm64" ]; then
            echo "This is an ARM64 (Apple Silicon) machine"
            echo "CPU_ARCH=arm64" >> $GITHUB_ENV
            echo "IS_ARM64=true" >> $GITHUB_ENV
          elif [ "$ARCH" = "x86_64" ]; then
            # Check if running under Rosetta
            if sysctl -n sysctl.proc_translated 2>/dev/null | grep -q '1'; then
              echo "This is an Intel/x86_64 architecture running under Rosetta 2 translation"
              echo "CPU_ARCH=x86_64-rosetta" >> $GITHUB_ENV
              echo "IS_ARM64=true" >> $GITHUB_ENV
            else
              echo "This is a native Intel/x86_64 machine"
              echo "CPU_ARCH=x86_64" >> $GITHUB_ENV
              echo "IS_ARM64=false" >> $GITHUB_ENV
            fi
          else
            echo "Unknown architecture: $ARCH"
            echo "CPU_ARCH=$ARCH" >> $GITHUB_ENV
            echo "IS_ARM64=false" >> $GITHUB_ENV
          fi

          # Additional system information
          system_profiler SPHardwareDataType | grep "Chip\\|Processor"

      - name: Install iOS dependencies and Appium
        run: |
          brew update
          brew install carthage ios-deploy libimobiledevice ideviceinstaller
          brew install ios-webkit-debug-proxy
          npm i --location=global appium
          npm install -g appium-doctor
          appium driver install xcuitest@7.35.0

      - name: Set up Xcode
        run: |
          sudo xcode-select --switch /Applications/Xcode_16.1.app/Contents/Developer || sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -license accept
          xcodebuild -version

          # Verify iOS SDK version is accessible
          echo "Checking iOS SDK version..."
          SDK_VERSION=$(xcrun --sdk iphonesimulator --show-sdk-version)
          echo "iOS SDK Version: $SDK_VERSION"
          echo "IOS_SDK_VERSION=$SDK_VERSION" >> $GITHUB_ENV

      - name: List available iOS simulators
        run: |
          xcrun simctl list devices
          xcrun simctl list runtimes

      - name: Select and Ensure an iOS Simulator is Running
        run: |
          # Specify iOS version and device
          IOS_VERSION="17.0"
          DEVICE_NAME="iPhone 14"

          # List available runtimes to check correct format
          echo "Available iOS runtimes:"
          xcrun simctl list runtimes | grep iOS

          # Find the exact runtime name that matches our version
          RUNTIME=$(xcrun simctl list runtimes | grep iOS | grep "$IOS_VERSION" | awk '{print $NF}')

          if [ -z "$RUNTIME" ]; then
            echo "Error: No iOS $IOS_VERSION runtime found. See available runtimes above."
            exit 1
          fi

          # Display Xcode and iOS configuration information
          echo "Xcode path: $(xcode-select -p)"
          echo "Using runtime: $RUNTIME"

          # Kill any existing simulator processes
          killall "Simulator" 2>/dev/null || true
          xcrun simctl shutdown all 2>/dev/null || true

          # Create a new simulator
          echo "Creating simulator with iOS $IOS_VERSION using runtime $RUNTIME"
          DEVICE_UDID=$(xcrun simctl create "CI-$DEVICE_NAME" "iPhone 14" "$RUNTIME")

          # Check if simulator was created successfully
          if [ -z "$DEVICE_UDID" ] || [[ "$DEVICE_UDID" == *"Invalid"* ]]; then
            echo "Error creating simulator. Listing available device types:"
            xcrun simctl list devicetypes | grep iPhone
            exit 1
          fi

          echo "Created simulator with UDID: $DEVICE_UDID"

          # Boot the simulator with increased timeout
          echo "Booting simulator..."
          xcrun simctl boot "$DEVICE_UDID" || echo "Boot command failed, checking if simulator is already running"

          # Wait for simulator to be fully booted
          echo "Waiting for simulator to be ready..."
          RETRY=0
          MAX_RETRY=30
          while [ $RETRY -lt $MAX_RETRY ]; do
            STATUS=$(xcrun simctl list | grep "$DEVICE_UDID" | grep "Booted")
            if [ ! -z "$STATUS" ]; then
              echo "Simulator is booted"
              # Additional wait to ensure services are started
              sleep 15
              break
            fi
            echo "Waiting for simulator to boot... ($RETRY/$MAX_RETRY)"
            sleep 10
            RETRY=$((RETRY+1))
          done

          if [ $RETRY -eq $MAX_RETRY ]; then
            echo "Failed to boot simulator after maximum retries"
            xcrun simctl list devices
            exit 1
          fi

          # Set the variable for later steps
          echo "DEVICE_UDID=$DEVICE_UDID" >> $GITHUB_ENV
          echo "IOS_VERSION=$IOS_VERSION" >> $GITHUB_ENV

      - name: Pre-warm simulator
        run: |
          # Check the simulator is ready
          echo "Verifying simulator ${{ env.DEVICE_UDID }} is running..."
          xcrun simctl list devices | grep "${{ env.DEVICE_UDID }}"

          # Launch Safari to warm up the device
          echo "Launching Safari to warm up the simulator..."
          xcrun simctl launch "${{ env.DEVICE_UDID }}" com.apple.mobilesafari

          # Verify iOS SDK version again to ensure it's accessible to Appium
          SDK_VERSION=$(xcrun --sdk iphonesimulator --show-sdk-version)
          echo "iOS SDK Version: $SDK_VERSION"

          # Allow time for simulator to be fully ready
          sleep 10

      - name: Download and Run KRE 10.1.0
        run: |
          # Create directory for KRE
          mkdir -p katalon_runtime
          cd katalon_runtime

          # Download KRE 10.1.0
          echo "Downloading Katalon Runtime Engine 10.1.0..."
          curl -L -o katalon.tar.gz "https://download.katalon.com/10.1.0/Katalon_Studio_Engine_MacOS_Arm64-10.1.0.tar.gz" || {
            echo "Error: Download failed"
            exit 1
          }

          # Extract KRE
          echo "Extracting Katalon Runtime Engine..."
          tar -xzf katalon.tar.gz || {
            echo "Error: Failed to extract katalon.tar.gz"
            exit 1
          }

          # Find the KRE executable
          KRE_DIR=$(find . -name "Katalon Studio Engine.app" -type d | head -1)
          if [ -z "$KRE_DIR" ]; then
            echo "Error: Could not find Katalon Studio Engine.app directory"
            ls -la
            exit 1
          fi

          # Make the KRE executable
          KATALONC_PATH="$KRE_DIR/Contents/MacOS/katalonc"
          echo "KRE executable path: $KATALONC_PATH"
          chmod +x "$KATALONC_PATH"

          # Run the Katalon tests with KRE
          echo "Running Katalon tests with KRE..."
          "$KATALONC_PATH" -projectPath="${{ github.workspace }}/support-reproduce-issue.prj" -retry=0 -statusDelay=15 -testSuitePath="Test Suites/mobileTS" -browserType="iOS" -deviceId="${{ env.DEVICE_UDID }}" -executionProfile="default" -apiKey="d1e929ac-be0f-4cec-a5fc-f9fd6d7c8485"

          # Check the exit code
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Katalon execution failed with exit code: $EXIT_CODE"
            exit $EXIT_CODE
          fi
